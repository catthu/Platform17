// TODO: comment file and functions and ES6-fy
// TODO: redo how readLine works (retry_msg generated by check)
// TODO: pre-load normalroom, check if a room uses it
// TODO: implement readPassword
// TODO: read about user authentication
// TODO: checkLogin() to check username and password at same time
// TODO: debug setTimeout in login

// Need to also:
// Load top command layer (does not change, load at ready)
// Load room command layer (changes often, make AJAX calls)
// Load global command layer (does not change, load at ready)
// Load item layer (changes often, make AJAX calls)


// Define global variables
var deferreds = [];
var current_room;
var current_room_script;


$(document).ready( function() {
        // After page load, focus on input field
        $("#input-text").focus()

        $(document).click( function() {
            // Focus on input field when clicking anywhere in the terminal
            $("#input-text").focus(); 
        });

        loadRoom("login");

        // Event listener for input submission
        // and pass the submission to the command dispatcher
        var form = document.getElementById("input-form");
        form.onsubmit = function(e) {
            e.preventDefault();
            input = document.getElementById("input-text").value;
            readLineAndRespond(input);         
    
        };
        
});

async function readLine(input, check = x => {return true;}, retry_msg = "Invalid. Try again.") {
    while (!check(await input)) {
        if (input !== null) {
            writeLine(retry_msg);
        }
        input = new Promise((resolve, reject) => {
            deferreds.push({resolve: resolve, reject: reject});
        });
    }
    return input;
}

function readLineAndRespond(input) {
    input = input.toLowerCase();
    writeLine("> " + input + "<br />");
    var form = document.getElementById("input-form");
    form.reset();
    if (deferreds.length > 0) {
        deferreds.pop().resolve(input);
    } else {
        var input_request_queue = [parseTopLayer, current_room_script.parseRoomLayer, parseItemLayer, parseGlobalLayer]; // the ordered queue for command layers
        for (var i = 0; i < input_request_queue.length; i ++) {
            if (input_request_queue[i](input)) {
                // do stuff
                break;
            }
        }
    }
}

function parseTopLayer(input) {
    // do stuff
    return false;
}

function parseGlobalLayer(input) {
    // do stuff
    return true;
}

function parseItemLayer(input) {
    return false;
}

// Print stuff to terminal

function writeLine(text) {
    var output = $("#terminal-output");
    output.append('<br />' + text + '<br />');
    $("#input-text").focus();
    $("html, body, #terminal").animate({ scrollTop: $("#terminal")[0].scrollHeight}, "fast");
}

// Function to support making AJAX calls to get the next room

async function loadRoom(room_codename) {
    const url = "/" + room_codename + "/";
    let res = await fetch(url);
    current_room = await res.json();

    let script = document.createElement('script');
    script.src = "/static/terminal/js/rooms/" + await current_room.js_filename + ".js";
    script.id = await current_room.js_filename + "_script";
    document.body.appendChild(script);
    script.onload = (() => {
        current_room_script = window[current_room.js_filename];
    });    
    return true;
}

